# ready
import numpy as np
import pandas as pd

import matplotlib.pyplot as plt
import seaborn as sns
plt.style.use("ggplot")

from sklearn.datasets import load_boston
boston = load_boston()

df = pd.DataFrame(boston.data)
df.columns = boston.feature_names
df["MEDV"] = boston.target  # medv(住宅価格の中央値)を目的変数にセット


# Elastic Net Model
from sklearn.model_selection import train_test_split
from sklearn.linear_model import ElasticNet

X = df.iloc[:, :-1].values  # 説明変数(目的変数(1列目)以外)
Y = df['MEDV'].values  # 目的変数

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3, random_state=0)

elasticnet = ElasticNet(alpha=1.0, l1_ratio=0.5)  # 正則化パラメータを1.0, L1ペナルティとL2ペナルティの比率を0.5とする

elasticnet.fit(X_train, Y_train)


# Model Evaluation
from sklearn.metrics import r2_score
from sklearn.metrics import mean_squared_error

Y_train_pred = elasticnet.predict(X_train)
Y_test_pred = elasticnet.predict(X_test)


print('RMSE 学習: %.2f, テスト: %.2f' % (
    mean_squared_error(Y_train, Y_train_pred, squared=False),
    mean_squared_error(Y_test, Y_test_pred, squared=False)
))  # RMSE

print('R^2 学習: %.2f, テスト: %.2f' % (
    r2_score(Y_train, Y_train_pred), 
    r2_score(Y_test, Y_test_pred)
))

# result
## RMSE 学習: 4.94, テスト: 5.65
## R^2 学習: 0.71, テスト: 0.62


# evaluation from residual plot
plt.scatter(Y_train_pred, 
            Y_train_pred - Y_train, 
            c="blue", 
            marker="o", 
            s=40,         # マーカーサイズ
            alpha=0.7,    # 透明度
            label="train")

plt.scatter(Y_test_pred, 
            Y_test_pred - Y_test, 
            c="red", 
            marker="o", 
            s=40,         # マーカーサイズ
            alpha=0.7,    # 透明度
            label="test")

plt.xlabel("predict")
plt.ylabel("error")
plt.legend(loc="upper left")
plt.hlines(y=0, xmin=-20, xmax=60, lw=2, color="black")
plt.xlim([-20, 60])
plt.ylim([-50, 40])
plt.tight_layout()

plt.show()
